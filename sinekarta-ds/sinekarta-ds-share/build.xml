<?xml version="1.0"?>

<project name="sinekarta-ds-share" default="update-running-share" basedir=".">
	
	<!-- 
	 | Prerequisites:
	 |  - in order to compile you need to have an installed alfresco.sdk, alfresco.sdk.path is then mandatory
	 |  - the project.name is necessary to properly name the compilation products
	 |  - the other user settings are mandatory only to the deploy target
	 | The working directory is expected to contain a fresh share instance named as ${share.fresh.warname}.
	 |
	 | Main targets:
	 |  - create-structure  - create the nested folders for allocating to the most common share configurations
	 |  - package-amp 		- generate the amp and store it into ${target.dir}/dist
	 |  - deploy      		- install the amp into a fresh share instance 
	 |  - unpack-amp 		- copy the amp into the work folder and unpack it - for consultation propose only 
	 |  - full-deploy 		- runs every target - with exception of create-structure
	 |-->

	<!-- User settings -->
	<!-- Change these properties to adapt the script to your environment -->

	<!-- verbose activation - if true, the ant task will plot their operations -->
	<property name="verbose" 				value="false" />
	<!-- project name - used to generate the JAR and AMP names -->
	<property name="project.name" 		value="sinekarta-ds-share" />
	<!-- project short name - used to generate the nested folders in create-structure -->
	<property name="project.package" 		value="org/sinekartads" />
	
	<!-- alfresco environment localitions -->
	<property name="alfresco.sdk.path" 		value="/jenia2.0/alfresco-sdk/alfresco-community-sdk-4.2.f" />
	<property name="alfresco.mmt.path" 		value="/opt/alfresco-4.2.f/bin/alfresco-mmt.jar" />
	
	<!-- direct installation, test and consultation -->
	<property name="work.dir" 				value="/jenia2.0/work" />
	<property name="share.fresh.warname"	value=".share-original.war" />
	<property name="share.work.dirname"		value="share" />
	
	
	
	<!-- Project structure -->
	
	<!-- base locations -->
	<property name="workspace.dir" 		value="../.." />
	<property name="super.dir"    		value=".." />
	<property name="project.dir"	 	value="." />
	<property name="source.dir"  		value="${project.dir}/src" />
	<property name="target.dir"   		value="${project.dir}/target" />
	
	<!-- general resources -->
	<property name="java.dir"    		value="${source.dir}/main/java" />
	<property name="resources.dir" 		value="${source.dir}/main/resources" />
	<property name="webapp.dir"    		value="${source.dir}/main/webapp" />

	<!-- amp resources -->
	<property name="config.dir"  		value="${webapp.dir}/WEB-INF" />
	<property name="css.dir"  			value="${webapp.dir}/css" />
	<property name="images.dir"  		value="${webapp.dir}/images" />
	<property name="scripts.dir"  		value="${webapp.dir}/scripts" />
	<property name="components.dir" 	value="${resources.dir}/components" />
	<property name="applet.dir" 		value="${components.dir}/sinekarta-ds/applet" />
	<property name="licences.dir"		value="${resources.dir}/licences" />
	
	
	
	<!-- System settings -->
	<!-- You shouldn't need to change anything here -->
	
	<!-- compilation products -->
	<property name="lib.dir"    		value="${target.dir}/dist/lib" />
	<property name="amp.dir" 			value="${target.dir}/dist/${project.name}" />
	<property name="amp.file" 			value="${target.dir}/dist/${project.name}.amp" />
	
	<!-- installation war and folders -->
	<property name="share.fresh.war"	value="${work.dir}/${share.fresh.warname}" />
	<property name="share.work.war" 	value="${work.dir}/share.war" />
	<property name="share.work.dir" 	value="${work.dir}/share" />
	<property name="amp.unpackDir" 		value="${work.dir}/${project.name}" />
	
	
	
	<!-- Dependencies management -->
		
	<!-- sinekarta-ds modules -->
	<property name="version"    		value="-1.0.0-SNAPSHOT" />
	<property name="commons.jar"		value="sinekarta-ds-commons${version}.jar" />
	<property name="share.jar"			value="sinekarta-ds-share${version}.jar" />
	<property name="applet.jar"			value="sinekarta-ds-applet.jar" />
	
	<!-- other maven dependencies 
	 | Alfresco already provides the most part of the needed jar, such as:
	 |  - apache-commons
	 |  - javax.mail
	 |  - jackson
	 |  - joda-time
	 |  - log4j
	 |  - xalan
	 | These will not need to be added to the amp libraries. The following jars will be imported
	 | into the amp, ignoring the current declared by the pom.
	 | Note that commons-lang3 will be added anyway since Alfresco use a too much dated version,
	 | the apache retro-compatibily should avoid, anyway, any version conflict.
	 |-->
	<property name="dependencies.dir" 	value="${target.dir}/lib" />
	<property name="commons-lang.jar"	value="commons-lang*.jar" />
	<property name="jacc.jar"			value="jacc*.jar" />
	<property name="json-lib.jar"		value="json-lib*.jar" />
	<property name="ezmorph.jar"		value="ezmorph*.jar" />
	
	<property name="applet.lib" 		value="${super.dir}/sinekarta-ds-applet/target/lib" />
	
	
	
	<!-- Targets implementation-->
	
	<!-- create-structure: create the nested folders for allocating to the most common share configurations -->
	<target name="create-structure" >
		<echo>Generating the java source folder...</echo>
		<mkdir dir="${java.dir}/${project.package}" />
		
		<echo>Generating the amp structure: </echo>
		<echo> - /config: alfresco module configuration files, imported into the module classpath</echo>
		<mkdir dir="${config.dir}/alfresco" />
		<mkdir dir="${config.dir}/alfresco/messages" />
		<mkdir dir="${config.dir}/alfresco/module/${project.name}" />
		<mkdir dir="${config.dir}/alfresco/site-data" />
		<mkdir dir="${config.dir}/alfresco/site-data/pages/${project.package}" />
		<mkdir dir="${config.dir}/alfresco/site-data/template-instances/${project.package}" />
		<mkdir dir="${config.dir}/alfresco/site-webscripts/${project.package}" />
		<mkdir dir="${config.dir}/alfresco/templates/${project.package}" />
		<mkdir dir="${config.dir}/alfresco/web-extension/${project.name}" />
		<echo> - /web resources, imported into the share root</echo>
		<mkdir dir="${css.dir}" />
		<mkdir dir="${images.dir}" />
		<mkdir dir="${scripts.dir}" />
		<echo> - /components: documentlibrary action icons, imported into the share root</echo>
		<mkdir dir="${components.dir}" />
		<mkdir dir="${components.dir}/actions" />
		<mkdir dir="${applet.dir}" />	
		<echo> - /licences: specific module licence files, MMT internal usage</echo>
		<mkdir dir="${licences.dir}" />
	</target>

	
	
	<!-- package-amp - generate the amp and store it into ${target.dir}/dist --> 
	<target name="prepare-libs">
		<echo>Clearing the ${lib.dir} folder</echo>
		<mkdir dir="${lib.dir}" />
		<delete includeemptydirs="true">
			<fileset dir="${lib.dir}" includes="**/*"/>
		 </delete>
		<echo>Storing the share-tier jars into the ${lib.dir} folder</echo>
		<echo> - sinekarta-ds share-tier modules</echo>
		<copy toDir="${lib.dir}" overwrite="true" verbose="${verbose}">
			<fileset dir="${super.dir}/sinekarta-ds-commons/target" 		includes="${commons.jar}" />
			<fileset dir="${super.dir}/sinekarta-ds-share/target" 			includes="${share.jar}" />
		</copy>
		<echo> - other maven dependencies</echo>
		<copy toDir="${lib.dir}" overwrite="true" verbose="${verbose}">
			<fileset dir="${dependencies.dir}" 								includes="${commons-lang.jar}" />
			<fileset dir="${dependencies.dir}"								includes="${jacc.jar}" />
			<fileset dir="${dependencies.dir}"								includes="${json-lib.jar}" />
			<fileset dir="${dependencies.dir}"								includes="${ezmorph.jar}" />
		</copy>
		<echo>Storing the ${applet.jar} and its dependencies into the ${applet.dir} folder</echo>
		<copy tofile="${applet.dir}/lib/${applet.jar}" file="${super.dir}/sinekarta-ds-applet/target/sinekarta-ds-applet-1.0.0-SNAPSHOT-jar-with-dependencies.jar" overwrite="true" verbose="${verbose}"/>
		<echo>Signing the ${applet.jar}, output in jarsigner.txt</echo>
		<signjar jar="${applet.dir}/lib/${applet.jar}" 
				signedjar="${applet.dir}/lib/${applet.jar}"
				lazy="false"
				alias="id di jenia software a comodo ca limited" 
				keypass="jenia"
				storepass="jenia"
				storetype="PKCS12"
				keystore="${workspace.dir}/JENIA_Software.p12"
				sigalg="SHA256withRSA"
		    	digestalg="SHA-256"/>
		
	</target>
	
    <target name="package-amp" depends="prepare-libs">
    	<delete dir="${amp.dir}" verbose="${verbose}" />
    	<mkdir dir="${amp.dir}" />
    	<delete file="${amp.file}" verbose="${verbose}" />
    	<echo>Generating the amp structure into ${amp.dir}:</echo>
    	<echo> - /config</echo>
    	<copy toDir="${amp.dir}/config" overwrite="true" verbose="${verbose}">
    		<fileset dir="${config.dir}" excludes="**/module.properties, **/file-mapping.properties" />
		</copy>
    	<delete dir="${amp.dir}/config/alfresco/module" />
    	<echo> - /lib</echo>
    	<copy toDir="${amp.dir}/lib" overwrite="true" verbose="${verbose}">
    		<fileset dir="${lib.dir}" />
		</copy>
    	<echo> - /components</echo>
    	<copy toDir="${amp.dir}/components" overwrite="true" verbose="${verbose}">
    		<fileset dir="${components.dir}" />
		</copy>
    	<echo> - /web</echo>
    	<copy toDir="${amp.dir}/web/css" overwrite="true" verbose="${verbose}">
    		<fileset dir="${css.dir}" />
		</copy>
		<copy toDir="${amp.dir}/web/images" overwrite="true" verbose="${verbose}">
    		<fileset dir="${images.dir}" />
		</copy>
		<copy toDir="${amp.dir}/web/scripts" overwrite="true" verbose="${verbose}">
    		<fileset dir="${scripts.dir}" />
		</copy>
		<echo> - module descriptor file and mapping</echo>
    	<copy toDir="${amp.dir}" overwrite="true" verbose="${verbose}">
	    	<fileset dir="${config.dir}/alfresco/module/${project.name}" includes="module.properties" />
	    	<fileset dir="${config.dir}/alfresco/module/${project.name}" includes="file-mapping.properties" />
		</copy>
    	
    	<echo>Generating ${amp.file}</echo>
        <zip destfile="${amp.file}" >
        	<fileset dir="${amp.dir}" />
        </zip>
    </target>
	
	
	<!-- deploy - install the amp into a fresh share instance -->
	
	<target name="deploy" description="Update the WAR file." >
		<echo>Deleting the current work share war and directory</echo>
		<delete dir="${share.work.dir}" verbose="${verbose}" />
		<delete file="${share.work.war}" verbose="${verbose}" />
		<echo>Refreshing the share work war at ${share.work.war} with ${share.fresh.war}</echo>
		<copy toFile="${share.work.war}" file="${share.fresh.war}" overwrite="true" /> 
		<echo>Installing ${amp.file} into ${share.work.war}</echo>
		<java jar="${alfresco.mmt.path}" fork="true" failonerror="true">
		    <arg line="install ${amp.file} ${share.work.war} -verbose -nobackup -force"/>
		</java>
		<echo>Unpacking ${share.work.war} into ${share.work.dir}</echo>
		<unwar dest="${share.work.dir}" src="${share.work.war}" />
		<echo>The module ${amp.file} has been installed into ${share.work.dir}</echo>
    	<echo>Suggestion: restart the webserver if running</echo>
		<!--copy toDir="${work.dir}/../webapps/share" overwrite="true" verbose="${verbose}">
			<fileset dir="${work.dir}/share" includes="**/*"/>
		</copy-->
	</target>
	
	
	<!-- full-deploy - runs every target - with exception of create-structure -->
	
	<target name="full-deploy" description="Update the WAR file." depends="package-amp, deploy">
		<echo>The current share instance at ${share.work.war} has been replaced with a fresh one with the current amp distribution</echo>
		<echo>Suggestion: restart the webserver if running</echo>
	</target>
	
	
	<!-- unpack-amp - copy the amp into the work folder and unpack it - for consultation propose only -->

	<target name="unpack-amp" depends="package-amp" description="Update the WAR file.">
		<echo>Unpacking the amp into the work folder - for consultation propose only </echo>
		<echo>Copying ${amp.file} into ${share.work.dir}</echo>
		<copy toDir="${work.dir}" file="${amp.file}" overwrite="true" />
		<echo>Unpacking ${amp.file} into ${amp.unpackDir}</echo>
		<unzip dest="${amp.unpackDir}" src="${amp.file}" />
	</target>
	
	
	<!-- update-running-share - update a running share, does not need to restart tomcat -->

	<target name="update-running-share" depends="package-amp" description="Update a running share">
		<echo>Copying the current amp settings into the work share instance at ${share.work.dir}</echo>
		<echo> - /components into the share/</echo>
		<!--copy toDir="${share.work.dir}" overwrite="true" verbose="${verbose}">
    		<fileset dir="${amp.dir}/components" />
		</copy-->
		<echo> - /config into share/WEB-INF/classes/</echo>
		<copy toDir="${share.work.dir}/WEB-INF/classes" overwrite="true" verbose="${verbose}">
    		<fileset dir="${amp.dir}/config" />
		</copy>
		<echo> - /components into share</echo>
		<copy toDir="${share.work.dir}/components" overwrite="true" verbose="${verbose}">
    		<fileset dir="${amp.dir}/components" />
		</copy>
		<echo>The work share instance has been updated</echo>
		<echo>You do not need to restart tomcat unless you did not change any spring configuration file</echo>
	</target>
</project>
