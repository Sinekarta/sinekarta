/*
 * Copyright (C) 2014 - 2015 Jenia Software.
 *
 * This file is part of Sinekarta-ds
 *
 * Sinekarta-ds is Open SOurce Software: you can redistribute it and/or modify
 * it under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sinekartads.utils;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;

public class HexUtils {


	
	// -----
	// --- Hex encode: 			byte[] | boolean[] | long -> String
	// -
	
	/**
	 * converting a byte[] to it's hexadecimal format String
	 * 
	 * @param buf the bytes to convert
	 * @return the hex String corresponding to buf
	 */
	public static String encodeHex (byte[] buf) {
		if (buf==null) return null;
		return Hex.encodeHexString(buf);
	}
	
	/**
	 * converting a boolean[] to it's hexadecimal format String
	 * 
	 * @param buf the bytes to convert
	 * @return the hex String corresponding to buf
	 */
	public static String encodeHex (boolean ... buf) {
		if (buf==null) return null;
		final int bytesNumber = buf.length/8;
		final int offset = buf.length%8;
		byte[] bytes = new byte[bytesNumber];
		byte tmpByte;
		for(int block=bytesNumber-1; block>=0; block--) {
			tmpByte = 0;
			for(int bit=8-1; bit>=0; bit--) {
				tmpByte += buf[block*8+bit-offset] ? 1 : 0;
				tmpByte = Integer.valueOf(tmpByte<<8).byteValue();
			}
			bytes[block] = tmpByte;
		}
		// TODO verify that works, i.e. encodeHex(true,false,false,true) -> "09"
		return Hex.encodeHexString(bytes);
	}

	// -----
	// --- Hex decode: 			String -> byte[]
	// -
	
	/**
	 * converting a hexadecimal format String to corresponding byte[]
	 * @param hex the hexadecimal format String
	 * @return corresponding byte[]
	 */
	public static byte[] decodeHex (String hex) {
		if (hex==null) return null;
		byte[] ret;
			try {
				ret = Hex.decodeHex(hex.toCharArray());
			} catch (DecoderException e) {
				// never thrown if target hex has been generated by any HexUtility
				throw new RuntimeException(e);
			}
		return ret;
	}
	
	public static InputStream decodeHexToInputStream ( String hex ) {
		byte[] content = decodeHex ( hex ); 
		return new ByteArrayInputStream ( content );
	}
	
	
	
	// -----
	// --- Random hex generation
	// -
	
	public static String randomHex(int length) {
		StringBuilder buf = new StringBuilder();
		for(int i=0; i<length; i++) {
			buf.append(Long.toHexString((long)(Math.random()*16)));
		} 
		return buf.toString();
	}


}
