/*
 * Copyright (C) 2014 - 2015 Jenia Software.
 *
 * This file is part of Sinekarta-ds
 *
 * Sinekarta-ds is Open SOurce Software: you can redistribute it and/or modify
 * it under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sinekartads.smartcard;

import java.security.PrivateKey;
import java.security.Signature;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.sinekartads.exception.CertificateListException;
import org.sinekartads.exception.InvalidPKCS11DriverException;
import org.sinekartads.exception.InvalidPinException;
import org.sinekartads.exception.InvalidSmartCardException;
import org.sinekartads.exception.PKCS11DriverNotFoundException;
import org.sinekartads.exception.PinLockedException;
import org.sinekartads.exception.SmartCardAccessException;
import org.sinekartads.exception.SmartCardReaderNotFoundException;
import org.sinekartads.utils.X509Utils;

public class FakeSmartCardAccess implements ISmartCardAccess {

	private static final Logger tracer = Logger.getLogger(SmartCardAccess.class);
	public static String FAKE_DRIVER = "fake";
	public static String FAKE_PIN	 = "123";
	
	Map<String, String> privateKeys = new HashMap<String, String>();
	Map<String, String> certChains  = new HashMap<String, String>();
	PrivateKey privateKey;

	public FakeSmartCardAccess ( ) {
		privateKeys.put("SineKarta", 	"30820275020100300d06092a864886f70d01010105000482025f3082025b020100028181008bd966d2d7682325337418654f77763d4f8b33b301d6b340894b09154485c0d50b9a9e7e65367680c2c1bdd49b72bfeb7f3a64a42c70c046761aadfc67d7c8492c57aff0fca08aa933c3a6d126e9a29bf687bacd34062eb0804162d1c8d5f97cf1c3f196618409682c22ddaf22781cb8f1cf5f23b758e029601e7df7ec9f41bd020301000102818043c28089a409370e2d521107f56b02854e673a137fce9167b19e03b6a44ed251e79f712ff8c65cc0a29cd0e794b212bf7e13c2f3b0fca88cfb688de88040133079ca37fd9975f9fa4986cb9af5ec1627546b66f35843ca580a3eb2d6ad18f6a84a78c3478c6d2fb1b5dfda7e8880c9677246c129d29aebd356e980224d12a599024100bd5345a2e54197d7ec70e18ac415b7e4f89d691f8477151949ba7dfa9a9ed52e9a5d003d995c319cd5ed643a7b5688262866a2ff498f3381b3ee9cde0f8914d7024100bd19967853086e9113b7cb4ea95453d0c0d9166edb68301e012693a957349480a3986dde9cf00135a11bb0738c63139cb49fac7b35b803e64ac684576e67778b02407995c8dadc304bbbb774a6e3df19b387b0c22688bf215ac36abe01b9b722d9f59bdcae12e1327c0a24b8d7ed56d833878dda9c43269278998b5c6a1192188ef102407042527b97ff777414da958d5b24bea53cf7234428688fb82042c082554cd7a40e7a9d2efcc7d64ffa16b007c89dc0b4d4ddbdcd5f34a0cc043419b8b5c822c5024076a138ce8ec551d3d47901b86ac1931216572e95fb4fd3ab20887720c2d6027f73c513b3319c1925bb17db7a173cafe21a28725c062796e60866990cfef5d596" );
		certChains.put("SineKarta", 	"308202f8308201e0a0030201020206014b0344fc5c300d06092a864886f70d01010b0500307e310b3009060355040613024954310b300906035504081302424f311c301a06035504071313436173616c65636368696f2064692052656e6f31173015060355040a130e4a656e696120536f66747761726531123010060355040b130953696e654b61727461311730150603550403130e4a656e696120536f667477617265301e170d3135303131393137333730375a170d3235303131363137333730375a306c3112301006035504030c0953696e654b6172746131123010060355040b0c0953696e654b6172746131173015060355040a0c0e4a656e696120536f667477617265311c301a06035504070c13436173616c65636368696f2064692052656e6f310b300906035504061302495430819f300d06092a864886f70d010101050003818d00308189028181008bd966d2d7682325337418654f77763d4f8b33b301d6b340894b09154485c0d50b9a9e7e65367680c2c1bdd49b72bfeb7f3a64a42c70c046761aadfc67d7c8492c57aff0fca08aa933c3a6d126e9a29bf687bacd34062eb0804162d1c8d5f97cf1c3f196618409682c22ddaf22781cb8f1cf5f23b758e029601e7df7ec9f41bd0203010001a3123010300e0603551d0f0101ff040403020640300d06092a864886f70d01010b050003820101007013f8677c6114a8da512ac9edf97d6eebd0c8d7d49e2f96a24c358f13f47112851c42bd18ff9bb7d453393f5eb8f9804f47e2189c556f03374c6d60e8bce2608950a5e132b735c71f99c5b71b4194cc90c1bc1bd04ef01d528b8a4b6e400cc11f60aa2d1b63ace6a65c3bcafaad75775865d3ab1dbf05c3ba6d58cd2d7c6c84b5ebb64e2f9aac644bf2eaa2bb00beced864b1995af978c3276f66d7a170fa0e794ead8e8624c2a7980488750bf117c9c6b86b58e16858a2532025d0667b01c7d33a548164e07551e930a27990d2cd982b8e3eb89f8572da8cc118a57c12072eacf869f54ef8b0be39b45b3a8d08fb1aee168eb010f4ce7877920a0e9c164835" );
	
		privateKeys.put("Andrea Tessaro Porta", "308202f8308201e0a0030201020206014b0344fc5c300d06092a864886f70d01010b0500307e310b3009060355040613024954310b300906035504081302424f311c301a06035504071313436173616c65636368696f2064692052656e6f31173015060355040a130e4a656e696120536f66747761726531123010060355040b130953696e654b61727461311730150603550403130e4a656e696120536f667477617265301e170d3135303131393137333730375a170d3235303131363137333730375a306c3112301006035504030c0953696e654b6172746131123010060355040b0c0953696e654b6172746131173015060355040a0c0e4a656e696120536f667477617265311c301a06035504070c13436173616c65636368696f2064692052656e6f310b300906035504061302495430819f300d06092a864886f70d010101050003818d00308189028181008bd966d2d7682325337418654f77763d4f8b33b301d6b340894b09154485c0d50b9a9e7e65367680c2c1bdd49b72bfeb7f3a64a42c70c046761aadfc67d7c8492c57aff0fca08aa933c3a6d126e9a29bf687bacd34062eb0804162d1c8d5f97cf1c3f196618409682c22ddaf22781cb8f1cf5f23b758e029601e7df7ec9f41bd0203010001a3123010300e0603551d0f0101ff040403020640300d06092a864886f70d01010b050003820101007013f8677c6114a8da512ac9edf97d6eebd0c8d7d49e2f96a24c358f13f47112851c42bd18ff9bb7d453393f5eb8f9804f47e2189c556f03374c6d60e8bce2608950a5e132b735c71f99c5b71b4194cc90c1bc1bd04ef01d528b8a4b6e400cc11f60aa2d1b63ace6a65c3bcafaad75775865d3ab1dbf05c3ba6d58cd2d7c6c84b5ebb64e2f9aac644bf2eaa2bb00beced864b1995af978c3276f66d7a170fa0e794ead8e8624c2a7980488750bf117c9c6b86b58e16858a2532025d0667b01c7d33a548164e07551e930a27990d2cd982b8e3eb89f8572da8cc118a57c12072eacf869f54ef8b0be39b45b3a8d08fb1aee168eb010f4ce7877920a0e9c164835" );
		certChains.put("Andrea Tessaro Porta", 	"308201a730820110020101300d06092a864886f70d01010b050030193117301506035504030c0e4a656e696120536f667477617265301e170d3134313132333030303030305a170d3135313132343030303030305a301f311d301b06035504030c14416e64726561205465737361726f20506f72746130819f300d06092a864886f70d010101050003818d0030818902818100d9851f3e8a2fb8550b6e80380fa31fe9bd9f9ffbd2e5261997995f8249f1f0ccddc83dbf08200641afba303a6a627af8f6eb90ceea6be6e9e567ba3f1638616d595c8346fa485b3563b3a410706715bd9195a4101f10e8fa095ddf360b6522a8ad5d1274f45292af5b9e3a7b9a13e9b91aefd270065f1742c3051ee002f66cfd0203010001300d06092a864886f70d01010b05000381810077809abcc495dc80b66fb913febdfea07c9b2cf763ed0c83a627e0bd925065e5fc8bccf7f4770023c0d43edf2078560f6ec5dc8c0a23acaa28c1058a8a04577b96215e854b1d1029f0d27953acc9e419dd0537e5fd8bce01707a7cc573598faa8c1d44c5075f778c1c10b960bf61d443091286a8fff927aee7168801ce6158aa" );
	
		privateKeys.put("Alessandro De Prato", 	"30820277020100300d06092a864886f70d0101010500048202613082025d02010002818100cffcb26feb77847d9146296f1aaf6997d6c33794e1849462a19ba0f1f17fcdcaa1bfc608c76500a5c13695f9c3561eb865e909e0e571071cf596a054b481df6b159e6ac81f2c3e25dab1e19d93a5879bd6ab8394120edd7c07bb8a328e37b4db4a20e0b5f483c16acfb4afcdccabd21b8f317eba03a0d958a59282622ba16e9b02030100010281803fe9ac3f9e4114f2ad30bd4cca0b7b4c508f9ec5de632a6200bd5d40dbf06521ce80aaef49aeacfb429b6e8cd8ccdf15d5233e88e098d211c11a2f5cb8376c9ae2461f138e04efa4e1194607d9a6309168338c753d7c056e51396c7286dba06027a00173138c85a449a6b3cc22adfb87f37cccc346a275013c54a1cf7a5d8841024100f938e5c0adf235d75a2ad2685f1ad51f29e4302a976f402c973d2aefd6e3b55f6d9984ab76973ba813081215c39755392c84b0da8d4e5e89f4dc18ab148a5be1024100d5a4b7b06ac6906663f9aa81295460a78de3cde43934bc6953220d31de8aa7b66fcdce7ba36a6a92a86639d871b2088c5089e51219b21d33e22cdefdd40c79fb024100be5de3c1861d195b62188b9805ed6d15dcdddc9cec07a2b16ce4e0434b95ac193492ab707da98f7c16ed774300a03c0cec207f26b20146dd82180d0fc124de81024100bfe80f0c8c4d42e686857cf03aa4cd9194b5fd7b351bb6e6d143342108aafa0db98e601cd564c0c86e362d5dcc7b448c6dc800196b35805fdb99bcd0baca5e4302401b4b232b347ea776173aecc3de918b559e2f3b8386ce62d08bbd1de21b56a59c98f88f2d4a414247a2de9af05311dc3e61c949bb941f6daebc6845ce23cee498" );
		certChains.put("Alessandro De Prato", 	"308201a63082010f020101300d06092a864886f70d01010b050030193117301506035504030c0e4a656e696120536f667477617265301e170d3134313132333030303030305a170d3135313132343030303030305a301e311c301a06035504030c13416c657373616e64726f20446520507261746f30819f300d06092a864886f70d010101050003818d0030818902818100cffcb26feb77847d9146296f1aaf6997d6c33794e1849462a19ba0f1f17fcdcaa1bfc608c76500a5c13695f9c3561eb865e909e0e571071cf596a054b481df6b159e6ac81f2c3e25dab1e19d93a5879bd6ab8394120edd7c07bb8a328e37b4db4a20e0b5f483c16acfb4afcdccabd21b8f317eba03a0d958a59282622ba16e9b0203010001300d06092a864886f70d01010b0500038181008a45ad41dd9996f62c7ad514e8075cde1e64de17371c33ac6870a55ac212124b809c8b708b0abfd422595d35a2249b3947f272ae1699000abc44df0509ae4ada526e570fdf7ada46d85fe651083c520059742a23adcb15773557deb254945654e736ee7111f6e78bbe37ef1272691b903395c306606ff3db5a38f83279e3da3e" );
	}

	public void selectDriver ( String pkcs11Driver ) throws SmartCardReaderNotFoundException, PKCS11DriverNotFoundException, InvalidPKCS11DriverException, InvalidSmartCardException, SmartCardAccessException {
		if ( !StringUtils.equals(pkcs11Driver, FakeSmartCardAccess.FAKE_DRIVER) ) { 
			tracer.error("only \"fake\" driver is allowed");
			throw new InvalidPKCS11DriverException("only \"fake\" driver is allowed");
		}
	}
	
	public String[] loginAndCertificateList ( String pin ) throws IllegalStateException, InvalidPinException, PinLockedException, SmartCardAccessException {
		login(pin);
		return certificateList();
	}
	
	public void login(String pin) throws IllegalStateException, SmartCardAccessException {
		if ( !StringUtils.equals(pin, FakeSmartCardAccess.FAKE_PIN) ) { 
			tracer.error(String.format("pin for the fake smartCard: %s", FAKE_PIN));
			throw new InvalidPinException(String.format("pin for the fake smartCard: %s", FAKE_PIN));
		}
	}

	public String[] certificateList() throws IllegalStateException, SmartCardAccessException {
		return certChains.keySet().toArray(new String[certChains.size()]);
	}

	public X509Certificate selectCertificate(String userAlias) throws CertificateListException {
		
		try {
			privateKey = X509Utils.privateKeyFromHex ( privateKeys.get(userAlias) );
			return X509Utils.rawX509CertificateFromHex ( certChains.get(userAlias) );
		} catch (CertificateException e) {
			tracer.error(String.format("pin for the fake smartCard: %s", FAKE_PIN));
			throw new CertificateListException(e); 
		}
	}

	public byte[] signFingerPrint(byte[] fingerPrint) throws IllegalStateException, IllegalArgumentException, SmartCardAccessException {
		
		byte[] digitalSignature;
		try {
			Signature signature = Signature.getInstance("SHA256withRSA");
			signature.initSign(privateKey);
			signature.update(fingerPrint);
			digitalSignature = signature.sign();
		} catch(Exception e) {
			tracer.error("sign fails...",e);
			throw new SmartCardAccessException(e);
		}
		return digitalSignature;
	}

	public void logout() throws IllegalStateException,SmartCardAccessException {
	}
	
	public void open() throws SmartCardAccessException {
		// nothing to do by now
	}

	public void close() throws SmartCardAccessException {
		// nothing to do by now
	}

}
